[
  {
    "model": "app_blog.blogpost",
    "pk": 1,
    "fields": {
      "title": "Django - что это такое, порядок установки",
      "content": "И еще желательно знать основы ORM – взаимодействие с БД через модели классов. Яркий пример реализации ORM – пакет SQLAlchemy. Далее, на занятиях этого цикла я буду полагать, что вы хорошо знаете язык Python, шаблонизатор Jinja, умеете составлять регулярные выражения (пакет re) и SQL-запросы. Обо всем этом я уже рассказывал на нашем канале и ссылки на соответствующие плейлисты вы найдете под этим видео.\r\n\r\nДавайте теперь разберемся, для чего же вообще предназначен фреймворк Django? Если очень кратко, то для обеспечения работы сайтов на стороне сервера. То есть, это инструмент для бэкенд разработчиков. А если немного подробнее, то процесс взаимодействия пользователя с сайтом можно представить в таком виде:",
      "preview": "",
      "views_count": 5,
      "date_create": "2024-01-15T21:00:09.499Z",
      "is_published": true
    }
  },
  {
    "model": "app_blog.blogpost",
    "pk": 2,
    "fields": {
      "title": "Модель MTV. Маршрутизация. Функции представления",
      "content": "У нас может быть прописано множество типов URL-адресов и каждый адрес связан со своим обработчиком – представлением (иногда его еще называют контроллером). Если текущий запрос от пользователя не совпал ни с одним предопределенным URL, то возвращается код ошибки 404 – страница не найдена.\r\n\r\nПредположим, что маршрутизатор нашел совпадение. Далее, активизируется представление, связанное с найденным типом URL-адреса. Представление (иногда его еще называют контроллером) – это или функция или класс, который отвечает за формирование ответа на соответствующий запрос. Как правило, ответом является HTML-страница. Эта страница, затем, возвращается клиенту, и он ее видит в браузере.",
      "preview": "",
      "views_count": 1,
      "date_create": "2024-01-15T21:07:22.743Z",
      "is_published": true
    }
  },
  {
    "model": "app_blog.blogpost",
    "pk": 3,
    "fields": {
      "title": "Маршрутизация, обработка исключений запросов, перенаправления",
      "content": "Обратите внимание, функция принимает два аргумента и возвращает ответ в виде экземпляра класса HttpResponseNotFound, которому передается HTML-страница, отображаемая при неверных запросах. Если теперь мы обновим страницу, то увидим заголовок «Страница не найдена».\r\n\r\nВ дальнейшем мы увидим, как вместо строки можно возвращать шаблон страницы 404. Сейчас главное понять принцип работы механизма обработки исключений.\r\n\r\nИтак, мы предполагаем, что функция pageNotFound будет вызываться всякий раз при возникновении исключения 404. И это важный момент. Смотрите, если в какой-либо другой функции представления сгенерировать это исключение, то будет автоматическое перенаправление на функцию pageNotFound и пользователь увидит все ту же страницу 404. Например, в функции archive мы сделаем проверку:",
      "preview": "",
      "views_count": 0,
      "date_create": "2024-01-15T21:14:58.185Z",
      "is_published": true
    }
  },
  {
    "model": "app_blog.blogpost",
    "pk": 4,
    "fields": {
      "title": "CRUD - основы ORM по работе с моделями",
      "content": "Используя ORM фреймворка Django, мы увидим, как выполняются данные команды в базовом исполнении. Почти все проекты, построенные на Django используют его встроенную ORM, не переходя на уровень SQL-запросов. В этом просто нет необходимости, так как ORM предоставляет богатейшие возможности по работе с БД. Кроме того, это обеспечивает независимость программного кода от конкретной используемой СУБД и если в будущем потребуется изменить тип БД, то сделать это будет предельно просто. Наконец, ORM в Django хорошо оптимизирует запросы по скорости выполнения и частоте обращения к таблицам БД, а также обеспечивает защиту от SQL-инъекций. Благодаря этому, даже начинающий веб-программист сможет создавать грамотный код по работе с БД.\r\n\r\nНа этом занятии мы рассмотрим базовые операции с таблицами посредством ORM Django. Позже мы еще углубимся в эту тему, а пока важно лишь понять общий принцип работы с моделями, знать как добавлять, выбирать, изменять и удалять записи.",
      "preview": "",
      "views_count": 1,
      "date_create": "2024-01-15T21:16:08.500Z",
      "is_published": true
    }
  }
]